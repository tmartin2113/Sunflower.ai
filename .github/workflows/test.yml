name: Sunflower AI Daily Test Suite

on:
  # Run once daily at 2 AM UTC
  schedule:
    - cron: '0 2 * * *'
  
  # Allow manual trigger with options
  workflow_dispatch:
    inputs:
      force_run:
        description: 'Force run even if last test failed'
        required: false
        default: 'false'
        type: choice
        options:
        - 'true'
        - 'false'
      test_type:
        description: 'Test type to run'
        required: false
        default: 'essential'
        type: choice
        options:
        - essential
        - full
        - safety-only
  
  # Run on push to main branch only if source code changed
  push:
    branches: [ main ]
    paths:
      - '**.py'
      - '**.js'
      - '**.ts'
      - 'requirements*.txt'
      - 'package*.json'
      - 'Dockerfile*'
      - 'docker-compose*.yml'
      - '.github/workflows/daily-test.yml'
  
  # Run on PR but only for changed files
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize ]
    paths:
      - '**.py'
      - '**.js'
      - '**.ts'
      - 'requirements*.txt'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  SKIP_EXPENSIVE_TESTS: true
  TEST_TIMEOUT: 30m

jobs:
  # Check if we should run tests based on last failure
  should-run:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
      test_type: ${{ steps.check.outputs.test_type }}
    steps:
    - name: Check last run status
      id: check
      uses: actions/github-script@v6
      with:
        script: |
          // Force run if manually triggered with force_run=true
          if (context.eventName === 'workflow_dispatch' && context.payload.inputs?.force_run === 'true') {
            core.setOutput('should_run', 'true');
            core.setOutput('test_type', context.payload.inputs?.test_type || 'essential');
            return;
          }
          
          // Always run on PR
          if (context.eventName === 'pull_request') {
            core.setOutput('should_run', 'true');
            core.setOutput('test_type', 'essential');
            return;
          }
          
          // For scheduled runs, check if there were commits since last run
          if (context.eventName === 'schedule') {
            const { data: runs } = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'daily-test.yml',
              per_page: 2
            });
            
            // If last run failed and no new commits, skip
            if (runs.workflow_runs.length > 0) {
              const lastRun = runs.workflow_runs[0];
              if (lastRun.conclusion === 'failure') {
                // Check for new commits since last run
                const { data: commits } = await github.rest.repos.listCommits({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  since: lastRun.created_at,
                  per_page: 1
                });
                
                if (commits.length === 0) {
                  core.setOutput('should_run', 'false');
                  console.log('Skipping: Last run failed and no new commits');
                  return;
                }
              }
            }
            
            core.setOutput('should_run', 'true');
            core.setOutput('test_type', 'full');
            return;
          }
          
          // For push events, run essential tests
          core.setOutput('should_run', 'true');
          core.setOutput('test_type', 'essential');
    
    - name: Log decision
      run: |
        echo "Should run: ${{ steps.check.outputs.should_run }}"
        echo "Test type: ${{ steps.check.outputs.test_type }}"

  # Quick validation checks (always run)
  quick-checks:
    runs-on: ubuntu-latest
    needs: should-run
    if: needs.should-run.outputs.should_run == 'true'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install minimal dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 mypy bandit safety
    
    - name: Quick syntax check
      run: |
        python -m py_compile run_local.py test_suite.py
    
    - name: Security scan
      run: |
        bandit -r . -ll -i -x '/tests/,/test_*.py' || true
    
    - name: Check formatting
      run: |
        black --check --diff . || true

  # Essential tests - run quickly for PRs and pushes
  essential-tests:
    runs-on: ${{ matrix.os }}
    needs: [should-run, quick-checks]
    if: |
      needs.should-run.outputs.should_run == 'true' &&
      (needs.should-run.outputs.test_type == 'essential' || needs.should-run.outputs.test_type == 'full')
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.11']
    timeout-minutes: 15
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.ollama
        key: ${{ runner.os }}-deps-${{ hashFiles('requirements*.txt') }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-timeout
    
    - name: Run critical tests only
      run: |
        # Run only critical test categories
        pytest tests/unit/test_safety_filter.py -v --timeout=60
        pytest tests/unit/test_profile_system.py -v --timeout=60
    
    - name: Check safety filter effectiveness
      run: |
        python -c "
        import sys
        sys.path.insert(0, '.')
        from test_suite import SafetyFilter
        
        # Test critical safety
        filter = SafetyFilter()
        test_cases = [
            ('violence topic', 10, False),
            ('what is photosynthesis', 10, True),
            ('inappropriate content', 8, False)
        ]
        
        for text, age, should_pass in test_cases:
            is_safe, _ = filter.check_content(text, age)
            if should_pass != is_safe:
                print(f'FAILED: {text}')
                sys.exit(1)
        
        print('✓ Safety filter working correctly')
        "
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: essential-test-results
        path: |
          .coverage
          pytest-report.xml

  # Safety-focused tests (critical, runs daily)
  safety-tests:
    runs-on: ubuntu-latest
    needs: [should-run, quick-checks]
    if: |
      needs.should-run.outputs.should_run == 'true' &&
      (needs.should-run.outputs.test_type == 'safety-only' || needs.should-run.outputs.test_type == 'full')
    timeout-minutes: 20
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-timeout
    
    - name: Run comprehensive safety validation
      run: |
        # Create comprehensive safety test
        cat > test_safety_comprehensive.py << 'EOF'
        import sys
        sys.path.insert(0, '.')
        from test_suite import SafetyFilter
        
        def test_comprehensive_safety():
            filter = SafetyFilter()
            
            # Comprehensive blocked terms test
            blocked_phrases = [
                "tell me about weapons",
                "how to make drugs",
                "violent content",
                "adult material",
                "dangerous activities"
            ]
            
            safe_phrases = [
                "what is gravity",
                "how do plants grow",
                "explain the water cycle",
                "what are primary colors",
                "how does digestion work"
            ]
            
            # Test all blocked phrases
            for phrase in blocked_phrases:
                for age in [6, 10, 14]:
                    is_safe, redirect = filter.check_content(phrase, age)
                    assert not is_safe, f"Failed to block: {phrase} for age {age}"
                    assert redirect is not None, f"No redirect for: {phrase}"
            
            # Test all safe phrases
            for phrase in safe_phrases:
                for age in [6, 10, 14]:
                    is_safe, _ = filter.check_content(phrase, age)
                    assert is_safe, f"Incorrectly blocked: {phrase} for age {age}"
            
            print(f"✓ Tested {len(blocked_phrases)} blocked phrases")
            print(f"✓ Tested {len(safe_phrases)} safe phrases")
            print(f"✓ 100% safety filter accuracy confirmed")
        
        if __name__ == "__main__":
            test_comprehensive_safety()
        EOF
        
        python test_safety_comprehensive.py
    
    - name: Generate safety report
      if: always()
      run: |
        echo "# Safety Test Report" > safety-report.md
        echo "Date: $(date)" >> safety-report.md
        echo "Status: ${{ job.status }}" >> safety-report.md
        echo "" >> safety-report.md
        echo "## Test Coverage" >> safety-report.md
        echo "- Blocked terms tested: 5 categories" >> safety-report.md
        echo "- Safe content tested: 5 categories" >> safety-report.md
        echo "- Age groups tested: 3 (6, 10, 14)" >> safety-report.md
        echo "- Total assertions: 30+" >> safety-report.md
    
    - name: Upload safety report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: safety-report
        path: safety-report.md

  # Full test suite (only for daily scheduled runs)
  full-tests:
    runs-on: ${{ matrix.os }}
    needs: [should-run, essential-tests]
    if: needs.should-run.outputs.test_type == 'full'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    timeout-minutes: 45
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Full dependency installation
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Set up Docker (Linux only)
      if: runner.os == 'Linux'
      run: |
        # Docker is pre-installed on GitHub runners
        docker --version
        docker-compose --version
    
    - name: Run complete test suite
      run: |
        pytest tests/ -v --cov=. --cov-report=xml --timeout=300
    
    - name: Upload coverage to Codecov
      if: runner.os == 'Linux'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: ${{ runner.os }}
        fail_ci_if_error: false

  # Report generation
  generate-report:
    runs-on: ubuntu-latest
    needs: [essential-tests, safety-tests]
    if: always() && needs.should-run.outputs.should_run == 'true'
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Generate summary
      run: |
        echo "# Test Summary - $(date +'%Y-%m-%d')" > summary.md
        echo "" >> summary.md
        echo "## Results" >> summary.md
        echo "- Essential Tests: ${{ needs.essential-tests.result }}" >> summary.md
        echo "- Safety Tests: ${{ needs.safety-tests.result }}" >> summary.md
        echo "" >> summary.md
        
        if [ "${{ needs.essential-tests.result }}" == "failure" ] || [ "${{ needs.safety-tests.result }}" == "failure" ]; then
          echo "⚠️ **Tests failed. Next scheduled run will be skipped unless code changes are made.**" >> summary.md
        else
          echo "✅ **All tests passed successfully!**" >> summary.md
        fi
    
    - name: Post to PR if exists
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });
    
    - name: Create issue on failure
      if: |
        failure() && 
        (github.event_name == 'schedule' || github.event_name == 'push')
      uses: actions/github-script@v6
      with:
        script: |
          const title = `🔴 Daily Test Failed - ${new Date().toISOString().split('T')[0]}`;
          const body = `The daily test suite failed. Please review the logs and fix any issues.
          
          **Failed Jobs:**
          - Essential Tests: ${{ needs.essential-tests.result }}
          - Safety Tests: ${{ needs.safety-tests.result }}
          
          [View Full Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          Tests will not run again until changes are committed to the repository.`;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['bug', 'test-failure', 'automated']
          });
